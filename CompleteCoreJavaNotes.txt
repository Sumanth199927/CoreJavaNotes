Java
---------------------------------------------------
Crearted by sunmicroSystem in 1991
java 1.0 created in 1996
---------------------------------------------------
it is a programming language design to run on virtual machine on every platform
---------------------------------------------------
oak-green-java
----------------------------------
comparing other language

java-high language,object oriented programming language
c-procedural programming language
c++ - procedural and object oriented programming language
---------------------------------------------------
jdk

to develop and run a java application environment
---------------------------------------------------
jre

to only run java application environment
---------------------------------------------------
jvm

to run the java program line by line 
---------------------------------------------------

jdk
----------------------------------------------------------------------------------------------------------------------------------------------------------
-  ----------------------------------------------------------------------------------------------------------------------------------------------------- -
-  -                                                                                                                                                    - -    
-  -                                                                                                                                                     -   
-  -                                                                                                                                                     -
-  -                                                                                                                                                     -
-  -                                                                                                                                                     -
-  -                                                                                                                                                     -
-  -                                                                                                                                                     -
-  ----------------------------------------------------------------------------------------------------------------------------------------------------- -
----------------------------------------------------------------------------------------------------------------------------------------------------------


how it works and converted
---------------------------------------------------------------
java sorce file[.java]

java complier[compile]

java class file[.class file]

import class loader subsystem

various memory areaof jvm
          |
execution | engine
          |
        interpreter
        
native method interface <----------------- native method library

-----------------------------------------------------------------------------------------
to develop android developments
1.java enterprise edition[jee]
2.java micro edition[jme]

to develop web application
1.jsp-order,results
2.jdbc-get data while processing
3.servelets-processing
-----------------------------------------------------------------------------------------
convention while using this

1. class : StudentDetails;
2. variable : studentDetails;
3. method : studentdetails();
4. Constructor : StudentDetails();
-----------------------------------------------------------------------------------------
while saving the programs varies in different ide

class StudentDetails
{
//any name can be given while saving because public is not used
}

public class StudentDetails
{
//class name should be given if we give other name it will show error
}
-----------------------------------------------------------------------------------------
main method in java

public static void main(String[] args)

-we can interchange and write public and static

public - to call by jvm from anywhere
static - complier can call it without th creation of an object or before
void - main() method wont return anyValue to jvm
main - we can change but customization of jvm must be done
String[] args - command line argument

-if no static then every object wanted to create new main class

-non static - specific to only 1 object [acc_num]
-static - common to more than  1 object [ifsc]

-the above syntax is very strict if we perform any changes we will get runtime exception saying "NoSuchMethodError:main"

-instead of args we can use anything

-we can declare in main()
final - child depend on parent
Synchronized
Strictfp
-----------------------------------------------------------------------------------------
example

class Test
{
final static synchronized Strictfp public void main(String...args)
{
System.out.println("void main");
}
}
//void main
-----------------------------------------------------------------------------------------
About System.out.println();

class Test                              //Test is a class name
{                                      //s is a static variable present in Test Class of type String
static String s="Java";               
}
Test.s.length();                       //.length() is a method present in string class
--------
class System                           //System is a class present in javaLangPackage
{
static PrintStream out;                //out is a static variable present in system class of type PrintStream
}
System.out.println("Hello");           //println() is a method present in print stream class
---------------------------------------------------------------------------------------------------------------------------
Terminologies


1)
datatypes
   |-----------------------------------------------------------------------------------------------------|
primitive                                                                                           non primitive
   |----------------------------|                                                             |--------|--------|
boolean                       numeric                                                      String   Array     Etc
   |                   |--------------------|
Boolean             character             integral                                                           
                       |                       |
                    char                   integral point                      floating point                 
                                                     |                                  |
                    |----------|----------|----------|                                  |---------------|
                    Byte      short      int      long                               float           double
                                           

type                description                   default             size                range

Boolean             true/false                    false               1bit                true/false
byte                2's complement integer        0                   8bit                -128 to 127
char                unicode character             1u0000              16 bit              ascii value 0 to 255
short               2's complement integer        0                   16 bit              -32,768 to 32,767
int                 2's complement integer        0                   32 bit              -2,147,483,648 to 2,147,483,647
long                2's complement integer        0                   64 bit              -9,223,372..808 to 9,223,372..808
float               1EEE 754 floating point       0.0                 32 bit              upto 7 decimal digits
double              1EEE 754 floating point       0.0                 64 bit              upto 16 decimal digits
---------------------------------------------------------------------------------------------------------------------------

2)
variables : location in memory to hold your data

there are 4 types of variables
a)instance variables[non static variable]
b)class variables[static variable]
c)local variables
d)parameters and arguments
-----------
a)instance variables
-Declaration - inside the class but outside method, constructor or blocks
-used - inside all method, blocks, and constructer within a class[not inside the static method]
-when variables gets allocated - when objects is created variables allocated
-stored memory - heap memory
-default values - boolean=false         int=0     objects=null
-access specifers- can be used

propertiesof instance variables
1) instance variables always get a default value
2) cannot be reinitialized directly within class but can be in the method

example
class Test
{
int a=10;
static int b=20;
public static void main(String...args)
{
Test ob1=new Test();
Syso(a);//error
Syso(ob1.a);
Syso(b);//error
Syso(ob1.b);
}
}

rules
1)can be marked final
2) can have 4 access modifers
public private protected [default also]
3)can't have static modifers
-----------
b)local variables
-Declaration - inside method, constructor, or, blocks;
-use - inside all the above not outside them;
-when variables gets allocated - when method constructor or blocks gets executed
-stored memory - stack memory
-default values - dosen't have any default value should be provided before use
-access - can't be used

example
public class Test
{
public void pupAge()
{
int age;
age=age+7;
System.out.println("puppy age is "+age);
}

public static void main(String...args)
{
Test test=new Test();
test.pupAge();
}
}
//error variable number might not have been initalized
------------
c)static variable
-same as instance variable but few change
-use - including static memory
-stored memory - static memory

example
class Abc
{
int a=10;
static int b=20;
public static void main(String...args)
{
Abc ob1=new Abc();
System.out.println(ob1.a);    //10
System.out.println(ob1.b);    //20
ob1.a=1000;
ob2.b=2000;
System.out.println(ob1.a);    //1000
System.out.println(ob1.b);    //2000
Abc ob2=new Abc();
System.out.println(ob2.a);    //10
System.out.println(ob2.b);    //2000
}
}
----------------
Before going to parameters and arguments let us discuss about control flow staements
---------------------------------------------------------------------------
Control Flow in Java

Java compiler executes the java code from top to bottom. The statements are executed according to the order in which they appear. However, Java provides statements that can be used to control the flow of java code. Such statements are called control flow statements.

Java provides three types of control flow statements.

1.Decision Making statements
2.Loop statements
3.Jump statements
----------------
Decision-Making statements:

Decision-making statements evaluate the Boolean expression and control the program flow depending upon the condition result. There are two types of decision-making statements in java, I.e., If statement and switch statement.

If Statement:
In Java, the "if" statement is used to evaluate a condition. The control of the program is diverted depending upon the condition result that is a Boolean value, either true or false. In java, there are four types of if-statements given below.

if statement
if-else statement
else-if statement
Nested if-statement
----------------
1. if statement:

This is the most basic statement among all control flow statements in java. It evaluates a Boolean expression and enables the program to enter a block of code if the expression evaluates to true.

Syntax of if statement is given below.

if(<condition>) {  
//block of code  
}  
  
Example in which we have used the if statement in the java code.  
  
public class Student {  
public static void main(String[] args) {  
int x = 10;  
int y = 12;  
if(x+y > 20) {  
System.out.println("x + y is greater than 20");  
}  
}  
}  
//x + y is greater than 20
---------------
2. if-else statement

The if-else statement is an extension to the if-statement, which uses another block of code, I.e., else block. The else block is executed if the condition of the if-block is evaluated as false.

Consider the following example.

public class Student {  
public static void main(String[] args) {  
int x = 10;  
int y = 12;  
if(x+y < 10) {  
System.out.println("x + y is less than 10");  
}   else {  
System.out.println("x + y is greater than 20");  
}  
}  
//x + y is greater than 20
---------------------
3. else-if statement

The else-if statement contains the if-statement followed by multiple else-if statements. In other words, we can say that it is the chain of if-else statements that create a decision tree where the program may enter any block of code. We can also define an else statement at the end of the chain.

Consider the following example.

public class Student {  
public static void main(String[] args) {  
String city = "Delhi";  
if(city == "Meerut") {  
System.out.println("city is meerut");  
}else if (city == "Noida") {  
System.out.println("city is noida");  
}else if(city == "Agra") {  
System.out.println("city is agra");  
}else {  
System.out.println(city);  
}  
}  
}  
//Delhi
--------------
4. Nested if-statement

In nested if-statements, the if statement contains multiple if-else statements as a separate block of code. Consider the following example.

Syntax
The syntax for a nested if...else is as follows −

if(Boolean_expression 1) {
   // Executes when the Boolean expression 1 is true
   if(Boolean_expression 2) {
      // Executes when the Boolean expression 2 is true
   }
}

Example

public class Test {

   public static void main(String args[]) {
      int x = 30;
      int y = 10;

      if( x == 30 ) {
         if( y == 10 ) {
            System.out.print("X = 30 and Y = 10");
         }
      }
   }
}
//x=30 and y=10
-------------
Java Switch Statement

The Java switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement. The switch statement works with byte, short, int, long, enum types, String and some wrapper types like Byte, Short, Int, and Long. Since Java 7, you can use strings in the switch statement.

Points to Remember

-There can be one or N number of case values for a switch expression.
-The case value must be of switch expression type only. The case value must be literal or constant. It doesn't allow variables.
-The case values must be unique. In case of duplicate value, it renders compile-time error.
-The Java switch expression must be of byte, short, int, long (with its Wrapper type), enums and string.
-Each case statement can have a break statement which is optional. When control reaches to the break statement, it jumps the control after the switch expression. --If a break statement is not found, it executes the next case.
-The case value can have a default label which is optional.

Syntax:

switch(expression){    
case value1:    
 //code to be executed;    
 break;  //optional  
case value2:    
 //code to be executed;    
 break;  //optional  
......    
default:     
 code to be executed if all cases are not matched;    
}   


example

public class SwitchExample {  
public static void main(String[] args) {  
    //Declaring a variable for switch expression  
    int number=20;  
    //Switch expression  
    switch(number){  
    //Case statements  
    case 10: System.out.println("10");  
    break;  
    case 20: System.out.println("20");  
    break;  
    case 30: System.out.println("30");  
    break;  
    //Default case statement  
    default:System.out.println("Not in 10, 20 or 30");  
    }  
}  
}
-------------
Month example

/Java Program to demonstrate the example of Switch statement  
//where we are printing month name for the given number  
public class SwitchMonthExample {    
public static void main(String[] args) {    
    //Specifying month number  
    int month=7;    
    String monthString="";  
    //Switch statement  
    switch(month){    
    //case statements within the switch block  
    case 1: monthString="1 - January";  
    break;    
    case 2: monthString="2 - February";  
    break;    
    ........... 
    case 12: monthString="12 - December";  
    break;    
    default:System.out.println("Invalid Month!");    
    }    
    //Printing month of the given number  
    System.out.println(monthString);  
}    
}   
----------------
Vowel Example

public class SwitchVowelExample {    
public static void main(String[] args) {    
    char ch='O';    
    switch(ch)  
    {  
        case 'a':   
            System.out.println("Vowel");  
            break;  
        ..........
        case 'u':   
            System.out.println("Vowel");  
            break;  
        case 'A':   
            System.out.println("Vowel");  
            break;  
        ...........
        case 'U':   
            System.out.println("Vowel");  
            break;  
        default:   
            System.out.println("Consonant");  
    }  
}    
}   
---------
Java Switch Statement is fall-through

The Java switch statement is fall-through. It means it executes all statements after the first match if a break statement is not present.

Example:
//Java Switch Example where we are omitting the  
//break statement  
public class SwitchExample2 {  
public static void main(String[] args) {  
    int number=20;  
    //switch expression with int value  
    switch(number){  
    //switch cases without break statements  
    case 10: System.out.println("10");  
    case 20: System.out.println("20");  
    case 30: System.out.println("30");  
    default:System.out.println("Not in 10, 20 or 30");  
    }  
}  
}  
-----------------
Java Switch Statement with String

Java allows us to use strings in switch expression since Java SE 7. The case statement should be string literal.

Example:

//Java Program to demonstrate the use of Java Switch  
//statement with String  
public class SwitchStringExample {    
public static void main(String[] args) {    
    //Declaring String variable  
    String levelString="Expert";  
    int level=0;  
    //Using String in Switch expression  
    switch(levelString){    
    //Using String Literal in Switch case  
    case "Beginner": level=1;  
    break;    
    case "Intermediate": level=2;  
    break;    
    case "Expert": level=3;  
    break;    
    default: level=0;  
    break;  
    }    
    System.out.println("Your Level is: "+level);  
}    
}   
-------------
Java Switch Statement with String

Java allows us to use strings in switch expression since Java SE 7. The case statement should be string literal.

Example:

//Java Program to demonstrate the use of Java Switch  
//statement with String  
public class SwitchStringExample {    
public static void main(String[] args) {    
    //Declaring String variable  
    String levelString="Expert";  
    int level=0;  
    //Using String in Switch expression  
    switch(levelString){    
    //Using String Literal in Switch case  
    case "Beginner": level=1;  
    break;    
    case "Intermediate": level=2;  
    break;    
    case "Expert": level=3;  
    break;    
    default: level=0;  
    break;  
    }    
    System.out.println("Your Level is: "+level);  
}    
}   
---------------------



















Method Scope
--------
Variables declared directly inside a method are available anywhere in the method following the line of code in which they were declared:

Example
public class Main {
  public static void main(String[] args) {
    // here x cant be used beacuse still not defined
    int x = 100;
    // Code here can use x because it is defined
    System.out.println(x);
  }
}
//100

Block Scope
-------
A block of code refers to all of the code between curly braces {}. Variables declared inside blocks of code are only accessible by the code between the curly braces, which follows the line in which the variable was declared:

public class Main {
  public static void main(String[] args) {
    // Code here CANNOT use x
    { // This is a block
      // Code here CANNOT use x
      int x = 100;
      // Code here CAN use x
      System.out.println(x);
   } // The block ends here
  // Code here CANNOT use x
  }
}
